TODO:
-read through the rest of the tutorial
-get to custom shaders. understand how to load geometry -> https://raw.githubusercontent.com/mrdoob/three.js/master/examples/webgl_buffergeometry_rawshader.html
-vert shader goal: see if we can get to basic shader animation with lots and lots of triangles
-frag shader goal: lambert shading with time varying ambient
-camera moves with click // http://stackoverflow.com/questions/18584389/listen-to-mouse-hold-event-on-website

-something is wrong with mouse holds:
https://developer.mozilla.org/en-US/docs/Web/API/Touch_events

-awesome if we can get three shader sets working:
	-basic transform and lambert -> for building on
	-grass
	-sky


RESOURCES, ART, NUMBERS, ETC.
-https://answers.yahoo.com/question/index?qid=20080925182716AA9Nqgz
-average 40,000 blades of grass per square foot, ~5 million blades in a 12x12 area
-if we make it taller, what can we get away with? hopefully a lot less
-let's try to get up to 1 million blades at once
-each will be 5 triangles, two quads and a pointy thing at the top, 5 vertices
-so 5 million triangles (!!)


MECHANICS
-HTML blawwwwwwwww
-I'll deal with this later
-http://lea.verou.me/2011/10/easily-keep-gh-pages-in-sync-with-master/


        var geometry = new THREE.BufferGeometry();
        var mapSize = 40;
        var vertexPositions = [];
        var indices = new Uint32Array(mapSize * mapSize * 6);

        for (var x = 0; x < mapSize + 1 ; x++)
        {
            for (var y = 0; y < mapSize + 1 ; y++)
            {
                vertexPositions.push([x, 5.0, y]);
            }
        }

        // a 40 x 40 grid with 2 triangles per square
        var index = 0;
        for (var x = 0; x < mapSize ; x++)
        {
            for (var y = 0; y < mapSize ; y++)
            {
                indices[index + 0] = ( x * (mapSize + 1) + y);
                indices[index + 1] = (indices[index + 0] + mapSize + 1);
                indices[index + 2] = (indices[index + 0] + mapSize + 2);

                indices[index + 3] = (indices[index + 0]);
                indices[index + 4] = (indices[index + 0] + 1);
                indices[index + 5] = (indices[index + 0] + 2);

                index += 6;
            }
        }